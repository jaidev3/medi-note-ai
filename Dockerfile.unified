# =============================================================================
# UNIFIED DOCKER CONTAINER
# Single container running Backend (FastAPI), AI Service, and Frontend (Next.js)
# Microservice architecture within a single container for development
# =============================================================================

FROM node:18-bullseye as frontend-builder

# Install frontend dependencies and build
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci

COPY frontend/ ./
RUN npm run build

# =============================================================================
# Main container with Python environment
# =============================================================================

FROM python:3.11-slim as unified

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    nodejs \
    npm \
    supervisor \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Install uv for Python dependency management
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Create app user and directories
RUN groupadd -r appuser && useradd -r -g appuser appuser
WORKDIR /app

# =============================================================================
# Backend Service Setup (Port 8001)
# =============================================================================

# Copy backend dependencies and install
COPY backend/pyproject.toml backend/uv.lock* /app/backend/
RUN cd /app/backend && uv sync --frozen --no-cache --no-dev

# Copy backend code
COPY backend/ /app/backend/

# =============================================================================
# AI Service Setup (Port 8002)
# =============================================================================

# Copy AI service dependencies and install
COPY ai_service/pyproject.toml ai_service/uv.lock* /app/ai_service/
RUN cd /app/ai_service && \
    if [ ! -f "uv.lock" ]; then uv lock; fi && \
    uv sync --frozen --no-cache --no-dev

# Download spaCy model for PII service
RUN cd /app/ai_service && uv run python -m spacy download en_core_web_sm

# Copy AI service code
COPY ai_service/ /app/ai_service/

# =============================================================================
# Frontend Service Setup (Port 3000)
# =============================================================================

# Copy built frontend from builder stage
COPY --from=frontend-builder /app/frontend/.next /app/frontend/.next
COPY --from=frontend-builder /app/frontend/public /app/frontend/public
COPY --from=frontend-builder /app/frontend/package*.json /app/frontend/
COPY --from=frontend-builder /app/frontend/next.config.ts /app/frontend/
COPY --from=frontend-builder /app/frontend/node_modules /app/frontend/node_modules

# Copy remaining frontend files
COPY frontend/ /app/frontend/

# =============================================================================
# Nginx Configuration for Internal Routing
# =============================================================================

COPY <<EOF /etc/nginx/sites-available/default
server {
    listen 80 default_server;
    server_name _;

    # Frontend (Next.js) - Default route
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Backend API routes
    location /api/ {
        proxy_pass http://localhost:8001/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # AI Service routes
    location /ai/ {
        proxy_pass http://localhost:8002/;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Health check endpoints
    location /health {
        proxy_pass http://localhost:8001/health;
    }
    
    location /ai-health {
        proxy_pass http://localhost:8002/health;
    }
}
EOF

# =============================================================================
# Supervisor Configuration for Process Management
# =============================================================================

COPY <<EOF /etc/supervisor/conf.d/echo-notes.conf
[supervisord]
nodaemon=true
user=root

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/var/log/nginx/error.log
stdout_logfile=/var/log/nginx/access.log

[program:backend]
command=/app/backend/uv run python -m uvicorn app.main:app --host 0.0.0.0 --port 8001
directory=/app/backend
user=appuser
autostart=true
autorestart=true
stderr_logfile=/var/log/backend.err.log
stdout_logfile=/var/log/backend.out.log
environment=PYTHONPATH="/app/backend"

[program:ai_service]
command=/app/ai_service/uv run python -m uvicorn ai_service.app.main:app --host 0.0.0.0 --port 8002
directory=/app/ai_service
user=appuser
autostart=true
autorestart=true
stderr_logfile=/var/log/ai_service.err.log
stdout_logfile=/var/log/ai_service.out.log
environment=PYTHONPATH="/app/ai_service"

[program:frontend]
command=npm start
directory=/app/frontend
user=appuser
autostart=true
autorestart=true
stderr_logfile=/var/log/frontend.err.log
stdout_logfile=/var/log/frontend.out.log
environment=NODE_ENV="production",NEXT_PUBLIC_API_URL="http://localhost/api",PORT="3000"
EOF

# Create cache directories and set permissions
RUN mkdir -p /app/.cache/huggingface /app/.cache/torch /var/log && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app

# Expose ports
EXPOSE 80 3000 8001 8002

# Health check for the unified container
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:80/health && \
        curl -f http://localhost:80/ai-health && \
        curl -f http://localhost:3000 || exit 1

# Start supervisor to manage all services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
