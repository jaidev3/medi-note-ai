"""create users table

Revision ID: 5dbbc5ec085f
Revises: 
Create Date: 2025-10-12 12:13:38.974852

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy
from pgvector.sqlalchemy import vector


# revision identifiers, used by Alembic.
revision: str = '5dbbc5ec085f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('patients',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=True),
    sa.Column('email', sa.String(length=150), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('professional',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('role', sa.Enum('AUDIOLOGISTS', 'HEARING_AID_SPECIALISTS', 'ENT_PHYSICIANS', 'CLINICAL_SUPPORT_STAFF', name='professional_role'), nullable=False),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('employee_id', sa.String(length=50), nullable=True),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id')
    )
    op.create_table('patient_visit_sessions',
    sa.Column('session_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('patient_id', sa.UUID(), nullable=False),
    sa.Column('professional_id', sa.UUID(), nullable=True),
    sa.Column('visit_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['professional_id'], ['professional.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_table('uploaded_documents',
    sa.Column('document_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('created_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=False),
    sa.Column('document_name', sa.String(length=200), nullable=False),
    sa.Column('extracted_text', sa.Text(), nullable=True),
    sa.Column('text_extracted', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('processing_status', sa.String(length=50), server_default='pending', nullable=False),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['patient_visit_sessions.session_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('document_id'),
    sa.UniqueConstraint('session_id', 'document_id', name='uq_session_document')
    )
    op.create_table('session_soap_notes',
    sa.Column('note_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('professional_id', sa.UUID(), nullable=True),
    sa.Column('ai_approved', sa.Boolean(), nullable=False),
    sa.Column('user_approved', sa.Boolean(), nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content_fts', postgresql.TSVECTOR(), nullable=True),
    sa.Column('embedding', vector.VECTOR(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['professional_id'], ['professional.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['session_id', 'document_id'], ['uploaded_documents.session_id', 'uploaded_documents.document_id'], name='fk_notes_session_document', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['session_id'], ['patient_visit_sessions.session_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('note_id')
    )
    op.create_index('ix_notes_approval_combo', 'session_soap_notes', ['user_approved', 'ai_approved'], unique=False)
    op.create_index('ix_notes_content_fts', 'session_soap_notes', ['content_fts'], unique=False, postgresql_using='gin')
    op.create_index('ix_notes_content_gin', 'session_soap_notes', ['content'], unique=False, postgresql_using='gin', postgresql_ops={'content': 'jsonb_path_ops'})
    op.create_index('ix_notes_context_gin', 'session_soap_notes', ['context_data'], unique=False, postgresql_using='gin', postgresql_ops={'context_data': 'jsonb_path_ops'})
    op.create_index('ix_notes_document', 'session_soap_notes', ['document_id'], unique=False)
    op.create_index('ix_notes_embedding_cosine', 'session_soap_notes', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.create_index('ix_notes_pending_ai_approval', 'session_soap_notes', ['session_id'], unique=False, postgresql_where=sa.text('ai_approved = false'))
    op.create_index('ix_notes_pending_user_approval', 'session_soap_notes', ['session_id'], unique=False, postgresql_where=sa.text('user_approved = false'))
    op.create_index('ix_notes_professional', 'session_soap_notes', ['professional_id'], unique=False)
    op.create_index('ix_notes_session_time', 'session_soap_notes', ['session_id', 'created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_notes_session_time', table_name='session_soap_notes')
    op.drop_index('ix_notes_professional', table_name='session_soap_notes')
    op.drop_index('ix_notes_pending_user_approval', table_name='session_soap_notes', postgresql_where=sa.text('user_approved = false'))
    op.drop_index('ix_notes_pending_ai_approval', table_name='session_soap_notes', postgresql_where=sa.text('ai_approved = false'))
    op.drop_index('ix_notes_embedding_cosine', table_name='session_soap_notes', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'})
    op.drop_index('ix_notes_document', table_name='session_soap_notes')
    op.drop_index('ix_notes_context_gin', table_name='session_soap_notes', postgresql_using='gin', postgresql_ops={'context_data': 'jsonb_path_ops'})
    op.drop_index('ix_notes_content_gin', table_name='session_soap_notes', postgresql_using='gin', postgresql_ops={'content': 'jsonb_path_ops'})
    op.drop_index('ix_notes_content_fts', table_name='session_soap_notes', postgresql_using='gin')
    op.drop_index('ix_notes_approval_combo', table_name='session_soap_notes')
    op.drop_table('session_soap_notes')
    op.drop_table('uploaded_documents')
    op.drop_table('patient_visit_sessions')
    op.drop_table('professional')
    op.drop_table('patients')
    # ### end Alembic commands ###
