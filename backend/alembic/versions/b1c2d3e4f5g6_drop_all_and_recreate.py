"""Drop all tables and create fresh schema

Revision ID: b1c2d3e4f5g6
Revises: a210d5660c59
Create Date: 2025-10-24 22:30:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b1c2d3e4f5g6'
down_revision: Union[str, Sequence[str], None] = 'a210d5660c59'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Drop all tables and create fresh schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop all existing tables in correct order to respect foreign key constraints
    op.execute("DROP TABLE IF EXISTS session_soap_notes CASCADE;")
    op.execute("DROP TABLE IF EXISTS uploaded_documents CASCADE;")
    op.execute("DROP TABLE IF EXISTS patient_visit_sessions CASCADE;")
    op.execute("DROP TABLE IF EXISTS users CASCADE;")

    # Drop any remaining enums that might exist
    op.execute("DROP TYPE IF EXISTS user_role CASCADE;")
    op.execute("DROP TYPE IF EXISTS professional_role CASCADE;")

    # Create enums first
    op.execute("CREATE TYPE user_role AS ENUM ('PATIENT', 'PROFESSIONAL', 'ADMIN');")
    op.execute("CREATE TYPE professional_role AS ENUM ('AUDIOLOGISTS', 'HEARING_AID_SPECIALISTS', 'ENT_PHYSICIANS', 'CLINICAL_SUPPORT_STAFF');")

    # Create fresh users table
    op.execute("""
        CREATE TABLE users (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            name VARCHAR UNIQUE,
            email VARCHAR UNIQUE,
            phone_number VARCHAR,
            password_hash VARCHAR,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            is_active BOOLEAN DEFAULT TRUE,
            role user_role DEFAULT 'PATIENT',
            professional_role professional_role,
            address VARCHAR,
            department VARCHAR,
            employee_id VARCHAR UNIQUE
        );
    """)

    # Create indexes for users table
    op.execute("CREATE INDEX ix_users_email ON users (email);")
    op.execute("CREATE INDEX ix_users_id ON users (id);")
    op.execute("CREATE INDEX ix_users_name ON users (name);")

    # Create patient_visit_sessions table
    op.execute("""
        CREATE TABLE patient_visit_sessions (
            session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            patient_id UUID NOT NULL REFERENCES users(id) ON DELETE RESTRICT,
            professional_id UUID REFERENCES users(id) ON DELETE SET NULL,
            visit_date TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            notes TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
        );
    """)

    # Create indexes for patient_visit_sessions
    op.execute("CREATE INDEX ix_patient_visit_sessions_patient_id ON patient_visit_sessions (patient_id);")
    op.execute("CREATE INDEX ix_patient_visit_sessions_professional_id ON patient_visit_sessions (professional_id);")
    op.execute("CREATE INDEX ix_patient_visit_sessions_visit_date ON patient_visit_sessions (visit_date);")

    # Create uploaded_documents table
    op.execute("""
        CREATE TABLE uploaded_documents (
            document_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            session_id UUID NOT NULL REFERENCES patient_visit_sessions(session_id) ON DELETE CASCADE,
            created_time TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            file_path TEXT NOT NULL,
            document_name VARCHAR(200) NOT NULL,
            extracted_text TEXT,
            text_extracted BOOLEAN DEFAULT FALSE,
            word_count INTEGER,
            processing_status VARCHAR(50) DEFAULT 'pending',
            processed_at TIMESTAMP WITH TIME ZONE,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            CONSTRAINT uq_session_document UNIQUE (session_id, document_id)
        );
    """)

    # Create indexes for uploaded_documents
    op.execute("CREATE INDEX ix_uploaded_documents_session_id ON uploaded_documents (session_id);")
    op.execute("CREATE INDEX ix_uploaded_documents_processing_status ON uploaded_documents (processing_status);")

    # Create session_soap_notes table
    op.execute("""
        CREATE TABLE session_soap_notes (
            note_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            session_id UUID NOT NULL REFERENCES patient_visit_sessions(session_id) ON DELETE CASCADE,
            document_id UUID NOT NULL REFERENCES uploaded_documents(document_id) ON DELETE RESTRICT,
            professional_id UUID REFERENCES users(id) ON DELETE SET NULL,
            ai_approved BOOLEAN NOT NULL,
            user_approved BOOLEAN NOT NULL,
            content JSONB NOT NULL,
            context_data JSONB,
            content_fts TSVECTOR,
            embedding VECTOR(768),
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
            CONSTRAINT fk_notes_session_document FOREIGN KEY (session_id, document_id)
                REFERENCES uploaded_documents(session_id, document_id) ON DELETE RESTRICT
        );
    """)

    # Create indexes for session_soap_notes
    op.execute("CREATE INDEX ix_notes_approval_combo ON session_soap_notes (user_approved, ai_approved);")
    op.execute("CREATE INDEX ix_notes_content_fts ON session_soap_notes USING gin (content_fts);")
    op.execute("CREATE INDEX ix_notes_content_gin ON session_soap_notes USING gin (content jsonb_path_ops);")
    op.execute("CREATE INDEX ix_notes_context_gin ON session_soap_notes USING gin (context_data jsonb_path_ops);")
    op.execute("CREATE INDEX ix_notes_document ON session_soap_notes (document_id);")
    op.execute("CREATE INDEX ix_notes_embedding_cosine ON session_soap_notes USING ivfflat (embedding vector_cosine_ops);")
    op.execute("CREATE INDEX ix_notes_professional ON session_soap_notes (professional_id);")
    op.execute("CREATE INDEX ix_notes_session_time ON session_soap_notes (session_id, created_at);")
    op.execute("CREATE INDEX ix_notes_pending_ai_approval ON session_soap_notes (session_id) WHERE ai_approved = false;")
    op.execute("CREATE INDEX ix_notes_pending_user_approval ON session_soap_notes (session_id) WHERE user_approved = false;")

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema - drop the newly created tables."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop tables in reverse order of creation
    op.execute("DROP TABLE IF EXISTS session_soap_notes CASCADE;")
    op.execute("DROP TABLE IF EXISTS uploaded_documents CASCADE;")
    op.execute("DROP TABLE IF EXISTS patient_visit_sessions CASCADE;")
    op.execute("DROP TABLE IF EXISTS users CASCADE;")

    # Drop the enums
    op.execute("DROP TYPE IF EXISTS user_role CASCADE;")
    op.execute("DROP TYPE IF EXISTS professional_role CASCADE;")

    # Recreate the old schema (from the original migration)
    # This would need to be based on the original a210d5660c59 migration
    # For now, we'll leave it empty since the original migration handles the downgrade

    # ### end Alembic commands ###