"""Initial migration: create all tables with pgvector 1536 dimensions

Revision ID: aaa63f0bcc5f
Revises: 
Create Date: 2025-08-10 16:30:56.216692

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from pgvector.sqlalchemy import Vector

# revision identifiers, used by Alembic.
revision: str = 'aaa63f0bcc5f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # Enable pgvector extension
    op.execute('CREATE EXTENSION IF NOT EXISTS vector')
    op.execute('CREATE EXTENSION IF NOT EXISTS pg_trgm')
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('patients',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=True),
    sa.Column('email', sa.String(length=150), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('address', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('professional',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('role', sa.Enum('AUDIOLOGISTS', 'HEARING_AID_SPECIALISTS', 'ENT_PHYSICIANS', 'CLINICAL_SUPPORT_STAFF', name='professional_role'), nullable=False),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('employee_id', sa.String(length=50), nullable=True),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=150), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id')
    )
    op.create_table('audit_log',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('event_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['professional.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('audit_log', schema=None) as batch_op:
        batch_op.create_index('idx_audit_log_created_at', ['created_at'], unique=False)
        batch_op.create_index('idx_audit_log_event_type', ['event_type'], unique=False)
        batch_op.create_index('idx_audit_log_time_range', ['created_at', 'event_type'], unique=False)
        batch_op.create_index('idx_audit_log_user_event', ['user_id', 'event_type'], unique=False)
        batch_op.create_index('idx_audit_log_user_id', ['user_id'], unique=False)

    op.create_table('patient_visit_sessions',
    sa.Column('session_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('patient_id', sa.UUID(), nullable=False),
    sa.Column('professional_id', sa.UUID(), nullable=True),
    sa.Column('visit_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['professional_id'], ['professional.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_table('uploaded_documents',
    sa.Column('document_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('created_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('s3_upload_link', sa.Text(), nullable=False),
    sa.Column('document_name', sa.String(length=200), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['patient_visit_sessions.session_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('document_id'),
    sa.UniqueConstraint('session_id', 'document_id', name='uq_session_document')
    )
    op.create_table('session_soap_notes',
    sa.Column('note_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('professional_id', sa.UUID(), nullable=True),
    sa.Column('ai_approved', sa.Boolean(), nullable=False),
    sa.Column('user_approved', sa.Boolean(), nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('content_fts', postgresql.TSVECTOR(), nullable=True),
    sa.Column('embedding', Vector(1536), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['professional_id'], ['professional.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['session_id', 'document_id'], ['uploaded_documents.session_id', 'uploaded_documents.document_id'], name='fk_notes_session_document', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['session_id'], ['patient_visit_sessions.session_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('note_id')
    )
    with op.batch_alter_table('session_soap_notes', schema=None) as batch_op:
        batch_op.create_index('ix_notes_approval_combo', ['user_approved', 'ai_approved'], unique=False)
        batch_op.create_index('ix_notes_content_fts', ['content_fts'], unique=False, postgresql_using='gin')
        batch_op.create_index('ix_notes_content_gin', ['content'], unique=False, postgresql_using='gin', postgresql_ops={'content': 'jsonb_path_ops'})
        batch_op.create_index('ix_notes_context_gin', ['context_data'], unique=False, postgresql_using='gin', postgresql_ops={'context_data': 'jsonb_path_ops'})
        batch_op.create_index('ix_notes_document', ['document_id'], unique=False)
        batch_op.create_index('ix_notes_embedding_cosine', ['embedding'], unique=False, postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'})
        batch_op.create_index('ix_notes_pending_ai_approval', ['session_id'], unique=False, postgresql_where=sa.text('ai_approved = false'))
        batch_op.create_index('ix_notes_pending_user_approval', ['session_id'], unique=False, postgresql_where=sa.text('user_approved = false'))
        batch_op.create_index('ix_notes_professional', ['professional_id'], unique=False)
        batch_op.create_index('ix_notes_session_time', ['session_id', 'created_at'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('session_soap_notes', schema=None) as batch_op:
        batch_op.drop_index('ix_notes_session_time')
        batch_op.drop_index('ix_notes_professional')
        batch_op.drop_index('ix_notes_pending_user_approval', postgresql_where=sa.text('user_approved = false'))
        batch_op.drop_index('ix_notes_pending_ai_approval', postgresql_where=sa.text('ai_approved = false'))
        batch_op.drop_index('ix_notes_embedding_cosine', postgresql_using='ivfflat', postgresql_ops={'embedding': 'vector_cosine_ops'})
        batch_op.drop_index('ix_notes_document')
        batch_op.drop_index('ix_notes_context_gin', postgresql_using='gin', postgresql_ops={'context_data': 'jsonb_path_ops'})
        batch_op.drop_index('ix_notes_content_gin', postgresql_using='gin', postgresql_ops={'content': 'jsonb_path_ops'})
        batch_op.drop_index('ix_notes_content_fts', postgresql_using='gin')
        batch_op.drop_index('ix_notes_approval_combo')

    op.drop_table('session_soap_notes')
    op.drop_table('uploaded_documents')
    op.drop_table('patient_visit_sessions')
    with op.batch_alter_table('audit_log', schema=None) as batch_op:
        batch_op.drop_index('idx_audit_log_user_id')
        batch_op.drop_index('idx_audit_log_user_event')
        batch_op.drop_index('idx_audit_log_time_range')
        batch_op.drop_index('idx_audit_log_event_type')
        batch_op.drop_index('idx_audit_log_created_at')

    op.drop_table('audit_log')
    op.drop_table('professional')
    op.drop_table('patients')
    # ### end Alembic commands ###
