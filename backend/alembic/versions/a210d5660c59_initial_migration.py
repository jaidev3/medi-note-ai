"""Initial migration

Revision ID: a210d5660c59
Revises: 
Create Date: 2025-10-24 22:12:21.544942

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a210d5660c59'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Create table using raw SQL to avoid enum auto-creation issues
    op.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            name VARCHAR UNIQUE,
            email VARCHAR UNIQUE,
            phone_number VARCHAR,
            password_hash VARCHAR,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            is_active BOOLEAN DEFAULT TRUE,
            role user_role DEFAULT 'PATIENT',
            professional_role professional_role,
            address VARCHAR,
            department VARCHAR,
            employee_id VARCHAR UNIQUE
        );
    """)

    # Create indexes
    op.execute("CREATE INDEX IF NOT EXISTS ix_users_email ON users (email);")
    op.execute("CREATE INDEX IF NOT EXISTS ix_users_id ON users (id);")
    op.execute("CREATE INDEX IF NOT EXISTS ix_users_name ON users (name);")

    # Skip data migration for now and handle it separately
    # Drop old tables if they exist
    op.execute("DROP TABLE IF EXISTS patients;")
    op.execute("DROP TABLE IF EXISTS professional;")

    # For now, don't add foreign key constraints as they require proper data migration
    # These can be added in a separate migration after data is properly migrated

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'session_soap_notes', type_='foreignkey')
    op.drop_constraint(None, 'patient_visit_sessions', type_='foreignkey')
    op.drop_constraint(None, 'patient_visit_sessions', type_='foreignkey')
    op.create_table('professional',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('AUDIOLOGISTS', 'HEARING_AID_SPECIALISTS', 'ENT_PHYSICIANS', 'CLINICAL_SUPPORT_STAFF', name='professional_role'), autoincrement=False, nullable=False),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('employee_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('professional_pkey')),
    sa.UniqueConstraint('employee_id', name=op.f('professional_employee_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('patients',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('patients_pkey')),
    sa.UniqueConstraint('email', name=op.f('patients_email_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
