---
alwaysApply: true
---
## Layer Responsibilities

- **routes/** — HTTP layer. Declares endpoints and request/response models, binds to controllers. No business logic here.
- **controller/** — Orchestration layer. Translates HTTP intent into service calls; aggregates multiple services if needed; handles cross-cutting concerns at request scope.
- **services/** — Domain/business logic. Calls repositories, external providers (LLMs, vector stores), enforces invariants and workflows.
- **data/** — Data access (repositories/DAOs). Encapsulates SQLAlchemy queries; returns ORM entities or simple DTOs.
- **models/** — SQLAlchemy ORM mapping layer (Declarative models).
- **schemas/** — Pydantic v2 models for validate/serialize inputs/outputs.
- **database/** — Engine/session lifecycle, and common dependency providers.
- **utils/** — Reusable helpers (validators, security, time, logging, pagination).
- **config/** — Application settings using `pydantic-settings`.

---

## Request Lifecycle (Example)

1. **Router** receives HTTP request → validates with Pydantic schema
2. **Controller** translates intent and coordinates services
3. **Service** executes domain logic (validation, workflows), calls **Data** layer
4. **Repository** runs SQLAlchemy queries (async) using session dependency
5. ORM **Model** instances returned → mapped to **Schema** for response
6. **Router** returns serialized response

---

## File-by-File Details

### `app/main.py`

- Creates `FastAPI` app with lifespan manager
- Includes `api_router` from `routes/__init__.py`
- Adds global middleware (CORS, logging) and exception handlers

### `app/database/db.py`

- Defines `DeclarativeBase`, async engine (`sqlite+aiosqlite`), `async_sessionmaker`
- Exposes `get_session()` dependency for per-request DB sessions
- Enables SQLite FK pragma (for cascades) via connect listener

### `app/database/dep.py`

- Common dependency providers: `db_session`, `pagination`, `auth_current_user`

### `app/routes/*`

- **`user_routes.py`**: `/users` CRUD, `/auth` login/refresh if kept here
- **`notes_routes.py`**: `/notes` CRUD, upload text endpoints
- **`rag_routes.py`**: `/rag/embed`, `/rag/retrieve`, `/rag/answer`

### `app/controller/*`

- **`user_controller.py`**: orchestrates `authentication_service` and `user_service`
- **`notes_controller.py`**: orchestrates `notes_service` + `soap_notes_service`
- **`rag_controller.py`**: orchestrates `rag_pipeline_service`

### `app/services/*`

- **`authentication_service.py`**: password hashing, token issuance/verification
- **`user_service.py`**: user domain logic (creation, profile updates)
- **`notes_service.py`**: clinical notes CRUD and domain rules
- **`soap_notes_service.py`**: NER → SOAP modeling → LLM structured output generation
- **`rag_pipeline_service.py`**: embedding, chunking, indexing, retrieval, synthesis

### `app/data/*`

- **`user_repository.py`**: queries for users table
- **`notes_repository.py`**: queries for notes table
- **`rag_repository.py`**: metadata for embeddings, document chunks (if DB-backed)

### `app/models/*`

- SQLAlchemy declarative models (e.g., `User`, `Note`, `Document`, `Chunk`, etc.)

### `app/schemas/*`

- Pydantic v2 DTOs (e.g., `UserCreate`, `UserRead`, `Token`, `NoteCreate`, `NoteRead`)

### `app/utils/*`

- Validation helpers (phone/time/rating), crypto utilities, logging, pagination

### `app/config/settings.py`

- `BaseSettings` with `DATABASE_URL`, `JWT_SECRET`, provider keys, feature flags

---

## Environment & Migrations

- **.env**: `DATABASE_URL=sqlite+aiosqlite:///./app.db`
- Alembic commands:

  ```bash
  alembic revision --autogenerate -m "<message>"
  alembic upgrade head
  ```

---

## Conventions

- **Async everywhere**: DB access is async; services may be sync or async depending on IO
- **No SQL in services**: all SQLAlchemy queries live in `data/`
- **DTOs at edges**: routes/controllers accept/return `schemas/*` only
- **Thin controllers**: keep orchestration/logging, defer business logic to services

---

## Other Folders

- `tests/` — pytest, httpx, pytest-asyncio
- `providers/` — external integrations (LLMs, storage, email)
- `docs/` — OpenAPI extras, ADRs
