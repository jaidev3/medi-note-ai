# =============================================================================
# PRODUCTION DOCKER COMPOSE FOR ECHO NOTES MONOREPO
# Backend (FastAPI) + Frontend (Next.js) + Database (PostgreSQL+pgvector)
# =============================================================================

version: '3.8'

services:
  # Database service
  db:
    image: pgvector/pgvector:0.8.0-pg17
    container_name: echo_notes_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-echo_note_rag}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - echo_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-echo_note_rag}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: echo_notes_backend
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-echo_note_rag}
      
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}
      HUGGINGFACEHUB_API_TOKEN: ${HUGGINGFACEHUB_API_TOKEN}
      HUGGINGFACE_MODEL_ID: ${HUGGINGFACE_MODEL_ID:-aaditya/Llama3-OpenBioLLM-70B}
      NER_MODEL_NAME: ${NER_MODEL_NAME:-d4data/biomedical-ner-all}
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      
      # CORS & Security
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      TRUSTED_HOSTS: ${TRUSTED_HOSTS:-localhost,127.0.0.1}
      
      # AWS S3 (Optional)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-}
      
      # HuggingFace cache
      TRANSFORMERS_CACHE: /home/appuser/.cache/huggingface
      HF_HOME: /home/appuser/.cache/huggingface
      TORCH_HOME: /home/appuser/.cache/torch
    networks:
      - echo_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
    container_name: echo_notes_frontend
    environment:
      # Next.js environment
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
    networks:
      - echo_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: echo_notes_nginx
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl:ro
    networks:
      - echo_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgdata:
    driver: local

networks:
  echo_network:
    driver: bridge
